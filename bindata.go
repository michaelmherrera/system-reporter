// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\xb3\x3e\x93\x98\xa8\x20\x21\xe4\xe4\xd2\x82\x10\x42\x02\xb4\xe5\xc0\x71\xd6\x9e\xae\x27\xf8\x4f\xb0\xa7\xbb\xdd\x6f\x8f\xb2\x69\x29\x5a\x09\xa9\x27\xeb\x8d\xad\xf9\xbd\x99\x67\xb3\xb9\xf9\x7a\x7d\xfb\xf3\xdb\x07\xf0\x12\xc3\xd8\x98\xe5\x80\x80\x69\x3f\x28\x4a\x6a\x6c\x1a\xe3\x09\xdd\xd8\x00\x00\x98\x48\x82\x60\x3d\x96\x4a\x32\xa8\x1f\xb7\x1f\xdb\x77\xea\xdf\xab\x84\x91\x06\x75\x60\x3a\xce\xb9\x88\x02\x9b\x93\x50\x92\x41\x1d\xd9\x89\x1f\x1c\x1d\xd8\x52\x7b\x16\xaf\x80\x13\x0b\x63\x68\xab\xc5\x40\x43\xdf\xbd\x7e\x6a\x25\x2c\x81\xc6\x9b\x6c\xef\x23\x25\x31\x7a\xd5\x8d\xd1\xab\x13\xb3\x69\x5b\xf8\x82\x42\x55\xc0\xe6\x38\x73\x20\x07\x98\x1c\x44\x4e\x7c\xc7\xe4\xe0\x7a\xbb\x85\xb6\x1d\x1b\x13\x38\xfd\x82\x42\x61\x50\x55\x4e\x81\xaa\x27\x12\x05\xbe\xd0\xdd\xa0\xbc\xc8\x5c\xdf\x6b\x1d\xf1\xc1\xba\xd4\xed\x72\x96\x2a\x05\xe7\x45\xd8\x1c\xf5\xdf\x82\xbe\xea\xde\x74\xbd\xb6\xb5\x3e\xd7\xba\xc8\xa9\xb3\xb5\x9e\x17\xb4\xf8\x99\xbe\xdf\x53\x39\x41\xe0\x5d\xc1\x72\x5a\xe9\xd5\x16\x9e\x05\x6a\xb1\xcf\x34\x9c\xf0\xa1\xdb\xe7\xbc\x0f\x84\x33\xd7\x33\x69\xa9\xe9\xc0\xbb\xaa\xa7\xdf\x4b\x17\x7d\xd5\xbd\xed\xfa\x47\x71\x26\x4d\x55\x8d\x46\xaf\xfd\x9e\x88\x97\x1b\xf8\x8c\x07\xdc\xae\xc4\xff\xd2\x5f\x3a\xeb\x74\x39\xea\xa5\x81\x5d\x76\xa7\xc7\xb4\x7c\x3f\x7e\xa2\x10\x32\x1c\x73\x09\x6e\x63\xb4\xef\x97\xac\xd6\x17\x4b\x68\xcb\xbf\xfa\x13\x00\x00\xff\xff\x54\xef\x35\xca\x67\x02\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 615, mode: os.FileMode(420), modTime: time.Unix(1608334495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
